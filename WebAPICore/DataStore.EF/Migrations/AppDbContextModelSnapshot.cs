// <auto-generated />
using System;
using DataStore.EF.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataStore.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("Core.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Core.Models.BPRPEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BPResponsiblePersonId")
                        .HasColumnType("int");

                    b.Property<bool>("CanLogin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BPResponsiblePersonId");

                    b.ToTable("BPRPEmails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BPResponsiblePersonId = 1,
                            CanLogin = false,
                            Email = "yasin@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            BPResponsiblePersonId = 1,
                            CanLogin = false,
                            Email = "yasin2@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            BPResponsiblePersonId = 2,
                            CanLogin = false,
                            Email = "behlül@gmail.com"
                        });
                });

            modelBuilder.Entity("Core.Models.BPRPPhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BPResponsiblePersonId")
                        .HasColumnType("int");

                    b.Property<string>("Gsm")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BPResponsiblePersonId");

                    b.ToTable("BPRPPhoneNumbers");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            BPResponsiblePersonId = 1,
                            Gsm = "+90 555 444 33 22 new"
                        },
                        new
                        {
                            Id = 3,
                            BPResponsiblePersonId = 2,
                            Gsm = "+90 555 444 33 22 beh"
                        });
                });

            modelBuilder.Entity("Core.Models.BPResponsiblePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BusinessPartnerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Position")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.ToTable("BPResponsiblePeople");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessPartnerId = 1,
                            Name = "Yasin"
                        },
                        new
                        {
                            Id = 2,
                            BusinessPartnerId = 2,
                            Name = "Behlül"
                        });
                });

            modelBuilder.Entity("Core.Models.BusinessPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Gsm")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BusinessPartners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adress = "adres1",
                            Email = "test@gg.com",
                            Gsm = "555555",
                            Name = "Partner111"
                        },
                        new
                        {
                            Id = 2,
                            Adress = "adres222",
                            Email = "test22@gg.com",
                            Gsm = "4444444",
                            Name = "Partner222"
                        });
                });

            modelBuilder.Entity("Core.Models.Chats.Chat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsNewMessage")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierCompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("SupplierCompanyId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Core.Models.Chats.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AdminMessage")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ChatId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MessageText")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Core.Models.EmailSender.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EmailTo")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext");

                    b.Property<int>("Tries")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("Core.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("RequestedProductId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierCompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("isConfirmedOffer")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("RequestedProductId");

                    b.HasIndex("SupplierCompanyId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Core.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Method")
                        .HasColumnType("longtext");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("OfferId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Core.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "product1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "product2"
                        });
                });

            modelBuilder.Entity("Core.Models.ProductTag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            TagId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            TagId = 3
                        });
                });

            modelBuilder.Entity("Core.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BusinessPartnerId")
                        .HasColumnType("int");

                    b.Property<string>("No")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessPartnerId = 1,
                            Status = 0,
                            Token = "asdsadsadsa"
                        });
                });

            modelBuilder.Entity("Core.Models.RequestedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestedProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deadline = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 1,
                            Quantity = 100,
                            RequestId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            Deadline = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 2,
                            Quantity = 2200,
                            RequestId = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Core.Models.ResponsiblePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Position")
                        .HasColumnType("longtext");

                    b.Property<int>("SupplierCompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierCompanyId");

                    b.ToTable("ResponsiblePeople");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Yasin",
                            SupplierCompanyId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Behlül",
                            SupplierCompanyId = 1
                        });
                });

            modelBuilder.Entity("Core.Models.SCRPEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<int>("ResponsiblePersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResponsiblePersonId");

                    b.ToTable("SCRPEmails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "yasin@gmail.com",
                            ResponsiblePersonId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "yasin2@gmail.com",
                            ResponsiblePersonId = 1
                        },
                        new
                        {
                            Id = 3,
                            Email = "behlül@gmail.com",
                            ResponsiblePersonId = 2
                        });
                });

            modelBuilder.Entity("Core.Models.SCRPPhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Gsm")
                        .HasColumnType("longtext");

                    b.Property<int>("ResponsiblePersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResponsiblePersonId");

                    b.ToTable("SCRPPhoneNumbers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Gsm = "+90 555 444 33 22",
                            ResponsiblePersonId = 1
                        },
                        new
                        {
                            Id = 2,
                            Gsm = "+90 555 444 33 22 new",
                            ResponsiblePersonId = 1
                        },
                        new
                        {
                            Id = 3,
                            Gsm = "+90 555 444 33 22 beh",
                            ResponsiblePersonId = 2
                        });
                });

            modelBuilder.Entity("Core.Models.SupplierCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Gsm")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SupplierCompanies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adress = "sakarya",
                            Email = "test@gmail.com",
                            Gsm = "+905556661122",
                            Name = "Fibu",
                            Token = "asdsadsa"
                        },
                        new
                        {
                            Id = 2,
                            Adress = "sakarya",
                            Email = "test2@gmail.com",
                            Gsm = "+905556661122",
                            Name = "Fibu2",
                            Token = "asdsadsa"
                        });
                });

            modelBuilder.Entity("Core.Models.SupplierCompanyTag", b =>
                {
                    b.Property<int>("SupplierCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("SupplierCompanyId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("SupplierCompanyTags");

                    b.HasData(
                        new
                        {
                            SupplierCompanyId = 1,
                            TagId = 1
                        },
                        new
                        {
                            SupplierCompanyId = 1,
                            TagId = 2
                        });
                });

            modelBuilder.Entity("Core.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "tag1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "tag2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "tag3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "tag4"
                        });
                });

            modelBuilder.Entity("Core.Models.Theatre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Theatres");
                });

            modelBuilder.Entity("Core.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("BuyedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentTheatreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DueTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentTheatreId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Core.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("Role");
                });

            modelBuilder.Entity("Core.Models.BPRPEmail", b =>
                {
                    b.HasOne("Core.Models.BPResponsiblePerson", "BPResponsiblePerson")
                        .WithMany("Emails")
                        .HasForeignKey("BPResponsiblePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BPResponsiblePerson");
                });

            modelBuilder.Entity("Core.Models.BPRPPhoneNumber", b =>
                {
                    b.HasOne("Core.Models.BPResponsiblePerson", "BPResponsiblePerson")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("BPResponsiblePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BPResponsiblePerson");
                });

            modelBuilder.Entity("Core.Models.BPResponsiblePerson", b =>
                {
                    b.HasOne("Core.Models.BusinessPartner", "BusinessPartner")
                        .WithMany("BPResponsiblePeople")
                        .HasForeignKey("BusinessPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessPartner");
                });

            modelBuilder.Entity("Core.Models.Chats.Chat", b =>
                {
                    b.HasOne("Core.Models.Request", "Request")
                        .WithMany("Chats")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.SupplierCompany", "SupplierCompany")
                        .WithMany("Chats")
                        .HasForeignKey("SupplierCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("SupplierCompany");
                });

            modelBuilder.Entity("Core.Models.Chats.Message", b =>
                {
                    b.HasOne("Core.Models.Chats.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Core.Models.Offer", b =>
                {
                    b.HasOne("Core.Models.RequestedProduct", "RequestedProduct")
                        .WithMany("Offers")
                        .HasForeignKey("RequestedProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Models.SupplierCompany", "SupplierCompany")
                        .WithMany("Offers")
                        .HasForeignKey("SupplierCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestedProduct");

                    b.Navigation("SupplierCompany");
                });

            modelBuilder.Entity("Core.Models.Payment", b =>
                {
                    b.HasOne("Core.Models.Offer", "Offer")
                        .WithOne("Payment")
                        .HasForeignKey("Core.Models.Payment", "OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Core.Models.ProductTag", b =>
                {
                    b.HasOne("Core.Models.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Core.Models.Request", b =>
                {
                    b.HasOne("Core.Models.BusinessPartner", "BusinessPartner")
                        .WithMany("Requests")
                        .HasForeignKey("BusinessPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessPartner");
                });

            modelBuilder.Entity("Core.Models.RequestedProduct", b =>
                {
                    b.HasOne("Core.Models.Product", "Product")
                        .WithMany("RequestedProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Request", "Request")
                        .WithMany("RequestedProducts")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Core.Models.ResponsiblePerson", b =>
                {
                    b.HasOne("Core.Models.SupplierCompany", "SupplierCompany")
                        .WithMany("ResponsiblePeople")
                        .HasForeignKey("SupplierCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierCompany");
                });

            modelBuilder.Entity("Core.Models.SCRPEmail", b =>
                {
                    b.HasOne("Core.Models.ResponsiblePerson", "ResponsiblePerson")
                        .WithMany("Emails")
                        .HasForeignKey("ResponsiblePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResponsiblePerson");
                });

            modelBuilder.Entity("Core.Models.SCRPPhoneNumber", b =>
                {
                    b.HasOne("Core.Models.ResponsiblePerson", "ResponsiblePerson")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ResponsiblePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResponsiblePerson");
                });

            modelBuilder.Entity("Core.Models.SupplierCompanyTag", b =>
                {
                    b.HasOne("Core.Models.SupplierCompany", "SupplierCompany")
                        .WithMany("SupplierCompanyTags")
                        .HasForeignKey("SupplierCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Tag", "Tag")
                        .WithMany("SupplierCompanyTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierCompany");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Core.Models.Ticket", b =>
                {
                    b.HasOne("Core.Models.Theatre", "Theatre")
                        .WithMany("Tickets")
                        .HasForeignKey("CurrentTheatreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theatre");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.BPResponsiblePerson", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("Core.Models.BusinessPartner", b =>
                {
                    b.Navigation("BPResponsiblePeople");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Core.Models.Chats.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Core.Models.Offer", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Core.Models.Product", b =>
                {
                    b.Navigation("ProductTags");

                    b.Navigation("RequestedProducts");
                });

            modelBuilder.Entity("Core.Models.Request", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("RequestedProducts");
                });

            modelBuilder.Entity("Core.Models.RequestedProduct", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Core.Models.ResponsiblePerson", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("Core.Models.SupplierCompany", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Offers");

                    b.Navigation("ResponsiblePeople");

                    b.Navigation("SupplierCompanyTags");
                });

            modelBuilder.Entity("Core.Models.Tag", b =>
                {
                    b.Navigation("ProductTags");

                    b.Navigation("SupplierCompanyTags");
                });

            modelBuilder.Entity("Core.Models.Theatre", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
